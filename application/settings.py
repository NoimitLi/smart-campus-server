"""
Django settings for application project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-uebuy&y-p_5_v^x8=jb$iucblt6c8!+38hc(xb+=lmve0=&1vv'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'daphne',  # ASGI 服务器

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',  # 跨域
    'drf_yasg',  # 生成接口文档
    'rest_framework',
    'channels',  # websocket服务

    "apps.userManage",  # 用户管理
    "apps.oauth",  # 权限
    "apps.socketServer",  # websocket服务
    "apps.scrapyServer",  # 爬虫服务
    "apps.academicManagement",  # 教务管理
    "apps.studentServer",  # 学生服务
    "apps.logisticalSupport",  # 后勤保障
    "apps.campusServices",  # 校园服务
    "apps.systemMonitoring",  # 系统监控
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'middleware.auth_middleware.TokenAuthMiddleware',
]

ROOT_URLCONF = 'application.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'application.wsgi.application'
ASGI_APPLICATION = 'application.asgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',  # 数据库引擎
        'NAME': 'smart_campus_system',  # 数据库名称
        'HOST': '47.118.17.9',  # 数据库地址
        'PORT': 3306,  # 数据库端口
        'USER': 'campus1',  # 数据库用户名
        'PASSWORD': '@Campus1234',  # 数据库密码
    }
}
# 配置redis缓存
# Redis的基本配置
REDIS_HOST = '47.118.17.9'
REDIS_PORT = 6379
REDIS_DB = 0
# 配置Django缓存后端为Redis
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f'redis://{REDIS_HOST}:{REDIS_PORT}',
        'KEY_PREFIX': '',  # 关键设置
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
# Channels 层配置 (使用 Redis 作为后端)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(REDIS_HOST, REDIS_PORT)],  # 使用 Redis 容器名
            "symmetric_encryption_keys": [SECRET_KEY],
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]
# 配置自定义认证，不使用django的默认auth_user表
AUTHENTICATION_BACKENDS = [
    # 'django.contrib.auth.backends.ModelBackend',  # 默认的认证后端
    'apps.oauth.backends.CustomAuthBackend',  # 自定义的认证后端
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

"""该中国时区"""
LANGUAGE_CODE = 'zh-hans'
TIME_ZONE = 'Asia/Shanghai'
USE_TZ = False

USE_I18N = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'  # 访问媒体文件的 URL 前缀
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # 本地存储路径

# APPEND_SLASH = False  # 关闭自动追加斜杠

CORS_ORIGIN_ALLOW_ALL = True
# CORS_ORIGIN_WHITELIST = [
# 'https://example.com',
# 'https://example.org',
# ]
